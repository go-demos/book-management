<?xml version="1.0" encoding="UTF-8"?>
<project name="dbdeploy" default="apply-deltas" basedir="../src/db">

    <property name="lib.dir" location="${basedir}/../../lib" />

    <property environment="env" />

    <property name="db.driver" value="org.h2.Driver" />

    <condition property="db.host" value="${env.DB_HOST}" else="localhost">
        <isset property="env.DB_HOST"/>
    </condition>
    <condition property="db.port" value="${env.DB_PORT}" else="9092">
        <isset property="env.DB_PORT"/>
    </condition>
    <condition property="db.path" value="${env.DB_PATH}" else="db">
        <isset property="env.DB_PORT"/>
    </condition>
    <condition property="db.dba.user" value="${env.DB_USERNAME}" else="sa">
        <isset property="env.DB_USERNAME"/>
    </condition>
    <condition property="db.dba.user_password" value="${env.DB_PASSWORD}" else="">
        <isset property="env.DB_PASSWORD"/>
    </condition>

    <property name="db.name" value="sample" />
    <property name="db.url" value="jdbc:h2:tcp://${db.host}:${db.port}/${db.path}/${db.name}" />

    <property name="sql.dir" location="${basedir}/migrate" />
    <property name="sql.schema.dir" location="${sql.dir}/schema" />
    <property name="sql.deltas.dir" location="${sql.dir}/deltas" />
    <property name="sql.dir.out" location="${sql.dir}/generated" />

    <path id="db.classpath">
        <fileset dir="${lib.dir}">
            <include name="dbdeploy/*.jar" />
            <include name="h2/*.jar" />
            <include name="hibernate/*.jar" />
        </fileset>
    </path>

    <macrodef name="exec_sql">
        <attribute name="src" />
        <attribute name="onerror" default="abort" />
        <sequential>
            <sql classpathref="db.classpath" driver="${db.driver}" url="${db.url}" userid="${db.dba.user}" password="${db.dba.user_password}" src="@{src}" onerror="@{onerror}" />
        </sequential>
    </macrodef>

    <target name="init">
        <delete dir="${sql.dir.out}" />
        <mkdir dir="${sql.dir.out}" />
    </target>

    <target name="build-db-baseline">
        <exec_sql src="${sql.schema.dir}/cleaupDatabase.sql" onerror="continue"/>
        <exec_sql src="${sql.schema.dir}/createVersionTables.sql" onerror="continue" />
    </target>

    <target name="execute-delta-script">
        <exec_sql src="${sql.dir.out}/db-deltas-hsql.sql" onerror="abort" />
    </target>

    <target name="generate-delta-script" description="Uses dbdeploy to generate the update and undo scripts">
        <taskdef name="dbdeploy" classname="net.sf.dbdeploy.AntTarget" classpathref="db.classpath" />
        <dbdeploy driver="${db.driver}" url="${db.url}" userid="${db.dba.user}" password="${db.dba.user_password}"
                  dir="${sql.deltas.dir}" outputfile="${sql.dir.out}/db-deltas-hsql.sql" dbms="hsql" deltaset="DDL"
                  undoOutputfile="${sql.dir.out}/db-deltas-hsql-UNDO.sql" />
    </target>

    <target name="execute-undo" description="Executes the undo script generated by dbdeploy">
        <exec_sql src="${sql.dir.out}/db-deltas-hsql-UNDO.sql" onerror="abort" />
    </target>

    <target name="initialize" depends="init, build-db-baseline" description="Build the initial db schema" />

    <target name="apply-deltas" depends="init, generate-delta-script, execute-delta-script" />

    <target name="rebuild-db" depends="init, initialize, generate-delta-script, execute-delta-script"
            description="Rebuild the database, apply deltas" />
</project>